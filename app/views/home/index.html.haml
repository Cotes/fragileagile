%include_gon


%canvas(id="myCanvas" width="1400" height="800")

-@subjects.each do |subject|
  -if subject.terminal==1
    =button_tag "#{subject.title}",
      id: "#{subject.title.gsub(' ', '_').gsub(',', '_').gsub('.', '_').gsub('/','_')}",
      onclick: "subjectClick('#{subject.title}', '#{subject.comments}');",
      style: "position: absolute; left: #{subject.x}px; top: #{subject.y}px; width: 110px; height: 45px; font-size: 18px; border: 2px solid #4CAF50;"
  -else
    =button_tag "#{subject.title}",
      id: "#{subject.title.gsub(' ', '_').gsub(',', '_').gsub('.', '_').gsub('/','_')}",
      onclick: "subjectClick('#{subject.title}', '#{subject.comments}');",
      style: "position: absolute; left: #{subject.x}px; top: #{subject.y}px; width: 110px; height: 45px; font-size: 18px;"


:javascript
  var canvas = document.getElementById('myCanvas');
  var context = canvas.getContext('2d');
  var allButtons = ['A_B_Testing', 'MVP', 'Code', 'Fragile', 'SCM', 'TBD', 'Automation', 'CI', 'Stable', 'TDD', 'Small_batches', 'BDD', 'Regression', 'CD', 'Economical', 'Semantic_Monitoring', 'CL', 'Lean_PMO', 'Stabilise_WIP', 'Performant', 'Feature_Teams', 'You_build_it__you_run_it' , 'agile', 'Emergent_Arch'];
  var mvpButtons = ['A_B_Testing', 'Code', 'SCM', 'TBD', 'Automation', 'CI', 'TDD', 'Small_batches', 'BDD', 'Regression', 'CD', 'Semantic_Monitoring', 'CL', 'Lean_PMO', 'Stabilise_WIP', 'Feature_Teams', 'You_build_it__you_run_it', 'Emergent_Arch'];
  var fragileButtons = ['A_B_Testing', 'SCM', 'TBD', 'Automation', 'CI', 'Stable', 'TDD', 'Small_batches', 'BDD', 'Regression', 'CD', 'Economical', 'Semantic_Monitoring', 'CL', 'Lean_PMO', 'Stabilise_WIP', 'Performant', 'Feature_Teams', 'You_build_it__you_run_it' , 'agile', 'Emergent_Arch'];
  var stableButtons = ['Fragile', 'TDD', 'Small_batches', 'BDD', 'Regression', 'Economical', 'Semantic_Monitoring', 'CL', 'Lean_PMO', 'Stabilise_WIP', 'Performant', 'Feature_Teams', 'You_build_it__you_run_it' , 'agile'];
  var agileButtons = ['Stable', 'Fragile', 'Economical', 'Performant'];

  hide(mvpButtons);

  canvas.onmousedown = function() {
    context.clearRect(0, 0, 1400, 800);
    show(allButtons);
  }

  function subjectClick(title, comment) {

    context.clearRect(0, 0, 1400, 800);

    switch(title) {
      case 'MVP':
        connectMVP();
        break;

      case 'Lean PMO':
        connectPMO();
        break;

      case 'Code':
        connectCode();
        break;

      case 'SCM':
        connectSCM();
        break;

      case 'TBD':
        connectTBD();
        break;

      case 'CI':
        connectCI();
        break;

      case 'Automation':
        connectAutomation();
        break;

      case 'TDD':
        connectTDD();
        break;

      case 'BDD':
        connectBDD();
        break;

      case 'Regression':
        connectRegression();
        break;

      case 'Emergent Arch':
        connectEmergent();
        break;

      case 'Small batches':
        connectBatches();
        break;

      case 'CD':
        connectCD();
        break;

      case 'Semantic Monitoring':
        connectSemantic();
        break;

      case 'CL':
        connectCL();
        break;

      case 'Stabilise WIP':
        connectWIP();
        break;

      case 'Feature Teams':
        connectTeams();
        break;

      case 'You build it, you run it':
        connectBuildIt();
        break;

      case 'A/B Testing':
        connectAB();
        break;

      case 'Fragile':
        connectFragile();
        break;

      case 'Stable':
        connectStable();
        break;

      case 'Economical':
        connectEconomical();
        break;

      case 'Performant':
        connectPerformant();
        break;

      case 'agile':
        connectAgile();
        break;
    }
  }

  function drawObject(fromObj, toObj) {
    drawLine(fromObj.x + 50, fromObj.y + 7, toObj.x + 50, toObj.y + 7)
  }

  function MVPCode() {
    drawObject(gon.mvp, gon.code);
  }

  function MVPTeams() {
    drawObject(gon.mvp, gon.teams);
  }

  function CodeSCM() {
    drawObject(gon.code, gon.scm);
  }

  function SCMAuto() {
    drawObject(gon.scm, gon.automation);
  }

  function SCMTBD() {
    drawObject(gon.scm, gon.tbd);
  }

  function TBDCI() {
    drawObject(gon.tbd, gon.ci);
  }

  function AutoOut() {
    drawObject(gon.automation, gon.tdd);
    drawObject(gon.automation, gon.bdd);
    drawObject(gon.automation, gon.ci);
    drawObject(gon.automation, gon.regression);
  }

  function connectCode() {
    show(['SCM', 'Fragile'])
    hide(['A_B_Testing', 'agile', 'Stable', 'Economical', 'Performant', 'TBD', 'Automation', 'CI', 'TDD', 'Emergent_Arch', 'Small_batches', 'BDD', 'Regression', 'CD', 'Semantic_Monitoring', 'CL', 'Lean_PMO', 'Stabilise_WIP', 'Feature_Teams', 'You_build_it__you_run_it'])

    drawObject(gon.code, gon.fragile);
    MVPCode();
    CodeSCM();

  }

  function connectCI() {
    show(['Fragile', 'CD', 'Stable', 'Automation', 'TBD'])
    hide(['A_B_Testing', 'agile', 'Economical', 'Performant', 'TDD', 'Emergent_Arch', 'Regression', 'Small_batches', 'BDD', 'Semantic_Monitoring', 'CL', 'Lean_PMO', 'Stabilise_WIP', 'Feature_Teams', 'You_build_it__you_run_it'])

    MVPCode();
    CodeSCM();
    SCMTBD();
    TBDCI();
    SCMAuto();

    drawObject(gon.automation, gon.ci);
    drawObject(gon.ci, gon.stable);
    drawObject(gon.ci, gon.cd);
  }

  function connectSCM() {
    show(['TBD', 'Automation', 'Emergent_Arch', 'Small_batches', 'Fragile'])
    hide(['A_B_Testing', 'Economical', 'Performant', 'Stable', 'agile', 'Semantic_Monitoring', 'CL', 'Lean_PMO', 'Stabilise_WIP', 'Feature_Teams', 'You_build_it__you_run_it', 'CI', 'TDD', 'BDD', 'Regression', 'CD'])

    MVPCode();
    CodeSCM();
    SCMTBD();
    SCMAuto();
    drawObject(gon.scm, gon.emergent);
    drawObject(gon.scm, gon.batches);
  }

  function connectFragile() {
    show(['Code', 'Fragile'])
    hide(fragileButtons);

    drawObject(gon.code, gon.fragile);
    MVPCode();
  }

  function connectStable() {
    show(['Stable', 'Code', 'SCM', 'TBD', 'Automation', 'CI'])
    hide(['CD', 'Emergent_Arch', 'A_B_Testing', 'TDD', 'BDD', 'CL', , 'Small_batches', 'Regression', 'Economical', 'Fragile', 'Performant', 'agile', 'Semantic_Monitoring', 'Lean_PMO', 'Stabilise_WIP', 'Feature_Teams', 'You_build_it__you_run_it'])

    MVPCode();
    CodeSCM();

    SCMAuto();
    SCMTBD();

    TBDCI();
    drawObject(gon.automation, gon.ci);
  }

  function connectEconomical() {
    show(['Code', 'SCM', 'CL', 'CI', 'Small_batches', 'Regression', 'Economical', 'TBD', 'Automation', 'BDD', 'CL', 'TDD', 'Emergent_Arch', 'CD'])
    hide(['A_B_Testing', 'Fragile', 'Performant', 'agile', 'Semantic_Monitoring', 'Stable', 'Lean_PMO', 'Stabilise_WIP', 'Feature_Teams', 'You_build_it__you_run_it'])

    MVPCode();
    CodeSCM();

    SCMTBD();
    SCMAuto();
    drawObject(gon.scm, gon.emergent);
    drawObject(gon.scm, gon.batches);

    drawObject(gon.batches, gon.cd);
    drawObject(gon.regression, gon.cd);

    drawObject(gon.ci, gon.cd);

    drawObject(gon.cd, gon.economical);
    drawObject(gon.cd, gon.cl);
    TBDCI();

    AutoOut();

    drawObject(gon.tdd, gon.emergent);
    drawObject(gon.tdd, gon.regression);

    drawObject(gon.bdd, gon.regression);
    drawObject(gon.bdd, gon.emergent);

    drawObject(gon.emergent, gon.batches);
    drawObject(gon.cd, gon.cl);
  }

  function connectPerformant() {
    show(['A_B_Testing', 'Feature_Teams', 'Semantic_Monitoring', 'MVP', 'Lean_PMO', 'Stabilise_WIP', 'Performant', 'Code', 'SCM', 'CL', 'CI', 'Small_batches', 'Regression', 'TBD', 'Automation', 'BDD', 'CL', 'TDD', 'Emergent_Arch', 'CD'])
    hide(['Economical', 'agile', 'Stable', 'You_build_it__you_run_it'])

    MVPCode();
    CodeSCM();
    MVPTeams();

    SCMTBD();
    SCMAuto();

    drawObject(gon.scm, gon.emergent);
    drawObject(gon.scm, gon.batches);

    drawObject(gon.batches, gon.cd);
    drawObject(gon.regression, gon.cd);
    drawObject(gon.ci, gon.cd);
    drawObject(gon.cd, gon.cl);
    TBDCI();

    AutoOut();

    drawObject(gon.tdd, gon.emergent);
    drawObject(gon.tdd, gon.regression);

    drawObject(gon.bdd, gon.regression);
    drawObject(gon.bdd, gon.emergent);
    drawObject(gon.bdd, gon.semantic);

    drawObject(gon.emergent, gon.batches);

    drawObject(gon.cl, gon.performant);
    drawObject(gon.wip, gon.performant);
    drawObject(gon.pmo, gon.wip);

    drawObject(gon.semantic, gon.ab);
    drawObject(gon.semantic, gon.wip);

    drawObject(gon.ab, gon.cl);

    drawObject(gon.mvp, gon.semantic);

    drawObject(gon.teams, gon.performant);

  }

  function connectAgile() {
    show(['A_B_Testing', 'You_build_it__you_run_it', 'agile', 'Feature_Teams', 'Semantic_Monitoring', 'MVP', 'Lean_PMO', 'Stabilise_WIP', 'Code', 'SCM', 'CL', 'CI', 'Small_batches', 'Regression', 'TBD', 'Automation', 'BDD', 'CL', 'TDD', 'Emergent_Arch', 'CD'])
    hide(['Economical', 'Stable', 'Performant', 'Fragile'])

    MVPCode();
    CodeSCM();
    MVPTeams();

    SCMTBD();
    SCMAuto();

    drawObject(gon.scm, gon.emergent);
    drawObject(gon.scm, gon.batches);

    drawObject(gon.batches, gon.cd);
    drawObject(gon.regression, gon.cd);
    drawObject(gon.ci, gon.cd);
    drawObject(gon.cd, gon.cl);

    drawObject(gon.cl, gon.agile);
    TBDCI();

    AutoOut();

    drawObject(gon.tdd, gon.emergent);
    drawObject(gon.tdd, gon.regression);

    drawObject(gon.bdd, gon.regression);
    drawObject(gon.bdd, gon.emergent);
    drawObject(gon.bdd, gon.semantic);

    drawObject(gon.emergent, gon.batches);

    drawObject(gon.pmo, gon.wip);

    drawObject(gon.semantic, gon.ab);
    drawObject(gon.semantic, gon.wip);

    drawObject(gon.ab, gon.cl);

    drawObject(gon.mvp, gon.semantic);

    drawObject(gon.teams, gon.devops);

    drawObject(gon.wip, gon.agile);
    drawObject(gon.devops, gon.agile);
  }

  function connectCD() {
    show(['CL', 'CI', 'Small_batches', 'Regression', 'Economical', 'Stable', 'TBD', 'Automation', 'BDD', 'CL', 'TDD', 'Emergent_Arch'])
    hide(['A_B_Testing', 'Fragile', 'Performant', 'agile', 'Semantic_Monitoring', 'Lean_PMO', 'Stabilise_WIP', 'Feature_Teams', 'You_build_it__you_run_it'])

    MVPCode();
    CodeSCM();

    SCMTBD();
    SCMAuto();

    drawObject(gon.scm, gon.emergent);
    drawObject(gon.scm, gon.batches);

    drawObject(gon.batches, gon.cd);
    drawObject(gon.regression, gon.cd);

    drawObject(gon.ci, gon.cd);

    drawObject(gon.cd, gon.economical);
    drawObject(gon.cd, gon.cl);

    TBDCI();

    AutoOut();

    drawObject(gon.tdd, gon.regression);
    drawObject(gon.tdd, gon.emergent);

    drawObject(gon.bdd, gon.regression);
    drawObject(gon.bdd, gon.emergent);

    drawObject(gon.emergent, gon.batches);
  }

  function connectAB() {
    show(['CL', 'A_B_Testing', 'agile', 'Fragile', 'Semantic_Monitoring', 'Performant', 'Automation', 'BDD'])
    hide(['Economical', 'Small_batches', 'TDD', 'Emergent_Arch', 'CI', 'TBD', 'Regression', 'CD', 'Stable', 'Stabilise_WIP', 'Lean_PMO', 'Feature_Teams', 'You_build_it__you_run_it'])

    MVPCode();
    CodeSCM();

    drawObject(gon.mvp, gon.semantic);

    SCMAuto();

    drawObject(gon.automation, gon.bdd);

    drawObject(gon.semantic, gon.ab);
    drawObject(gon.ab, gon.cl);
    drawObject(gon.bdd, gon.semantic);
    drawObject(gon.cl, gon.performant);
    drawObject(gon.cl, gon.agile);
  }

  function connectCL() {
    show(['A_B_Testing', 'agile', 'Economical', 'Semantic_Monitoring', 'Performant', 'TBD', 'CI', 'CD', 'Small_batches', 'Automation', 'TDD', 'Emergent_Arch', 'BDD', 'Regression'])
    hide(['Stable', 'Fragile', 'Stabilise_WIP', 'Lean_PMO', 'Feature_Teams', 'You_build_it__you_run_it'])

    MVPCode();
    CodeSCM();

    drawObject(gon.mvp, gon.semantic);

    SCMTBD();
    SCMAuto();

    drawObject(gon.scm, gon.emergent);
    drawObject(gon.scm, gon.batches);
    drawObject(gon.scm, gon.tbd);

    TBDCI();

    AutoOut();

    drawObject(gon.bdd, gon.semantic);
    drawObject(gon.bdd, gon.emergent);
    drawObject(gon.bdd, gon.regression);

    drawObject(gon.tdd, gon.emergent);
    drawObject(gon.tdd, gon.regression);

    drawObject(gon.emergent, gon.batches);
    drawObject(gon.batches, gon.cd);

    drawObject(gon.regression, gon.cd);
    drawObject(gon.ci, gon.cd);

    drawObject(gon.semantic, gon.ab);

    drawObject(gon.ab, gon.cl);
    drawObject(gon.cd, gon.cl);

    drawObject(gon.cl, gon.performant);
    drawObject(gon.cl, gon.agile);
  }

  function connectTDD() {
    show(['Fragile', 'Automation', 'Emergent_Arch', 'Regression'])
    hide(['A_B_Testing', 'TBD', 'CI', 'CD', 'agile', 'Stable', 'Economical', 'Performant', 'Small_batches', 'BDD', 'Semantic_Monitoring', 'CL', 'Lean_PMO', 'Stabilise_WIP', 'Feature_Teams', 'You_build_it__you_run_it'])

    MVPCode();
    CodeSCM();

    SCMAuto();

    drawObject(gon.automation, gon.tdd);
    drawObject(gon.tdd, gon.emergent);
    drawObject(gon.tdd, gon.regression);
  }

  function connectBDD() {
    show(['Regression', 'Emergent_Arch', 'Fragile', 'Semantic_Monitoring'])
    hide(['A_B_Testing', 'TDD', 'TBD', 'CI', 'CD', 'agile', 'Stable', 'Economical', 'Performant', 'Small_batches', 'CL', 'Lean_PMO', 'Stabilise_WIP', 'Feature_Teams', 'You_build_it__you_run_it'])

    MVPCode();
    CodeSCM();

    SCMAuto();

    drawObject(gon.automation, gon.bdd);

    drawObject(gon.bdd, gon.semantic);
    drawObject(gon.bdd, gon.emergent);
    drawObject(gon.bdd, gon.regression);
  }

  function connectRegression() {
    show(['Automation', 'CD', 'TDD', 'Fragile', 'BDD'])
    hide(['A_B_Testing', 'TBD', 'CI', 'agile', 'Stable', 'Economical', 'Performant', 'Small_batches', 'CL', 'Lean_PMO', 'Stabilise_WIP', 'Feature_Teams', 'You_build_it__you_run_it', 'Emergent_Arch', 'Semantic_Monitoring'])

    MVPCode();
    CodeSCM();

    SCMAuto();

    drawObject(gon.automation, gon.bdd);
    drawObject(gon.automation, gon.tdd);
    drawObject(gon.automation, gon.regression);

    drawObject(gon.bdd, gon.regression);
    drawObject(gon.tdd, gon.regression);

    drawObject(gon.automation, gon.cd);
  }

  function connectEmergent() {
    show(['BDD', 'Automation', 'Small_batches', 'TDD', 'SCM', 'Fragile'])
    hide(['A_B_Testing', 'Regression', 'TBD', 'CI', 'CD', 'agile', 'Stable', 'Economical', 'Performant', 'Semantic_Monitoring', 'CL', 'Lean_PMO', 'Stabilise_WIP', 'Feature_Teams', 'You_build_it__you_run_it'])

    MVPCode();
    CodeSCM();

    SCMAuto();
    drawObject(gon.scm, gon.emergent);

    drawObject(gon.automation, gon.tdd);
    drawObject(gon.automation, gon.bdd);

    drawObject(gon.tdd, gon.emergent);
    drawObject(gon.bdd, gon.emergent);

    drawObject(gon.emergent, gon.batches);
  }

  function connectBatches()
  {
    show(['Automation', 'TDD', 'BDD', 'CD', 'Fragile'])
    hide(['A_B_Testing', 'Regression', 'TBD', 'CI', 'agile', 'Stable', 'Economical', 'Performant', 'Semantic_Monitoring', 'CL', 'Lean_PMO', 'Stabilise_WIP', 'Feature_Teams', 'You_build_it__you_run_it'])

    MVPCode();
    CodeSCM();

    SCMAuto();
    drawObject(gon.scm, gon.batches);
    drawObject(gon.scm, gon.emergent);

    drawObject(gon.emergent, gon.batches);
    drawObject(gon.batches, gon.cd);

    drawObject(gon.tdd, gon.emergent);
    drawObject(gon.automation, gon.tdd);
    drawObject(gon.automation, gon.bdd);
    drawObject(gon.bdd, gon.emergent);
  }

  function connectSemantic() {
    show(['Fragile', 'BDD', 'Stabilise_WIP', 'A_B_Testing'])
    hide(['CL', 'CD', 'Small_batches', 'Emergent_Arch', 'TDD', 'Regression', 'TBD', 'CI', 'agile', 'Stable', 'Economical', 'Performant', 'Lean_PMO', 'Feature_Teams', 'You_build_it__you_run_it'])

    MVPCode();
    CodeSCM();
    SCMAuto();

    drawObject(gon.automation, gon.bdd);
    drawObject(gon.bdd, gon.semantic);
    drawObject(gon.mvp, gon.semantic);
    drawObject(gon.semantic, gon.wip);

    drawObject(gon.semantic, gon.ab);
  }

  function connectWIP() {
    show(['Lean_PMO', 'BDD', 'Stabilise_WIP', 'Performant', 'agile'])
    hide(['A_B_Testing', 'CL', 'CD', 'Small_batches', 'Emergent_Arch', 'TDD', 'Regression', 'TBD', 'CI', 'Stable', 'Economical', 'Feature_Teams', 'You_build_it__you_run_it'])

    MVPCode();
    CodeSCM();
    SCMAuto();

    drawObject(gon.automation, gon.bdd);
    drawObject(gon.bdd, gon.semantic);
    drawObject(gon.mvp, gon.semantic);
    drawObject(gon.semantic, gon.wip);
    drawObject(gon.pmo, gon.wip);

    drawObject(gon.wip, gon.performant);
    drawObject(gon.wip, gon.agile);
  }

  function connectPMO() {
    show(['Lean_PMO', 'BDD', 'Stabilise_WIP'])
    hide(['A_B_Testing', 'CL', 'CD', 'Small_batches', 'Emergent_Arch', 'TDD', 'Regression', 'TBD', 'CI', 'agile', 'Stable', 'Economical', 'Performant', 'Feature_Teams', 'You_build_it__you_run_it'])

    MVPCode();
    CodeSCM();
    SCMAuto();

    drawObject(gon.automation, gon.bdd);
    drawObject(gon.bdd, gon.semantic);
    drawObject(gon.mvp, gon.semantic);
    drawObject(gon.semantic, gon.wip);
    drawObject(gon.pmo, gon.wip);
  }

  function connectAutomation() {
    show(['TDD', 'BDD', 'Regression', 'CI', 'Fragile', 'Stable'])
    hide(['A_B_Testing', 'TBD', 'CD', 'CL', 'Emergent_Arch', 'Small_batches', 'agile', 'Economical', 'Performant', 'Semantic_Monitoring', 'Stabilise_WIP', 'Lean_PMO', 'Feature_Teams', 'You_build_it__you_run_it'])

    MVPCode();
    CodeSCM();
    SCMAuto();

    AutoOut();
  }

  function connectTBD() {
    show(['CI', 'SCM', 'Fragile'])
    hide(['A_B_Testing', 'agile', 'Stable', 'Economical', 'Performant', 'Automation', 'TDD', 'Emergent_Arch', 'Small_batches', 'BDD', 'Regression', 'CD', 'Semantic_Monitoring', 'CL', 'Lean_PMO', 'Stabilise_WIP', 'Feature_Teams', 'You_build_it__you_run_it'])

    MVPCode();
    CodeSCM();
    SCMTBD();

    TBDCI();
  }

  function connectMVP() {
    show(['Code', 'Feature_Teams', 'MVP'])
    hide(['A_B_Testing', 'SCM', 'TBD', 'Automation', 'CI', 'Stable', 'TDD', 'Small_batches', 'BDD', 'Regression', 'CD', 'Economical', 'Semantic_Monitoring', 'CL', 'Lean_PMO', 'Stabilise_WIP', 'Performant', 'You_build_it__you_run_it' , 'agile', 'Emergent_Arch']);

    MVPTeams();
    MVPCode();
  }

  function connectBuildIt() {
    show(['agile', 'Fragile', 'Feature_Teams', 'You_build_it__you_run_it'])
    hide(['A_B_Testing', 'Performant', 'CI', 'CD', 'Stable', 'Code', 'SCM', 'Automation', 'TBD', 'Economical', 'TDD', 'Emergent_Arch', 'Regression', 'Small_batches', 'BDD', 'Semantic_Monitoring', 'CL', 'Lean_PMO', 'Stabilise_WIP'])

    MVPTeams();
    drawObject(gon.teams, gon.devops);
    drawObject(gon.teams, gon.agile);
  }

  function connectTeams() {
    show(['Performant', 'Fragile', 'Feature_Teams', 'Performant', 'You_build_it__you_run_it'])
    hide(['A_B_Testing', 'agile', 'CI', 'CD', 'Stable', 'Code', 'SCM', 'agile', 'Automation', 'TBD', 'Economical', 'TDD', 'Emergent_Arch', 'Regression', 'Small_batches', 'BDD', 'Semantic_Monitoring', 'CL', 'Lean_PMO', 'Stabilise_WIP'])

    MVPTeams();
    drawObject(gon.teams, gon.performant);
    drawObject(gon.teams, gon.devops);
  }

  function show(buttons) {
    for(button in buttons) {
      elem = "#" + buttons[button]
      $(elem).fadeIn("slow");
    }
  }

  function hide(buttons) {
    for(button in buttons) {
      elem = "#" + buttons[button]
      $(elem).fadeOut("slow");
    }
  }

  function drawLine(fromX, fromY, toX, toY) {
    context.beginPath();

    context.moveTo(fromX, fromY);
    context.lineTo(toX, toY);

    context.stroke();
  }
